<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coderby.myapp.member.dao.IMemberRepository">

<resultMap id="memberMap" type="com.coderby.myapp.member.model.MemberVO">
<result property="userId" column="userid" />
<result property="name" column="name" />
<result property="password" column="password" />
<result property="email" column="email" />
<result property="address" column="address" />
<result property="enabled" column="enabled" />
<result property="auth" column="authority" />
</resultMap>

<insert id="insertMember" parameterType="com.coderby.myapp.member.model.MemberVO">
insert into member values({#userId}, {#name}, {#password}, {#email}, {#address}, {#enabled})
</insert> 

<insert id="insertAuth" parameterType="string">
insert into authorities values({#userId}, 'ROLE_USER')
</insert> 

<select id="getMember" parameterType="string" resultMap="memberMap">
select m.userid, name, password, email, address, enabled, authority 
from member m 
join authorities au 
on m.userid=au.userid 
where m.userid=#{userId}
</select>

<select id="getPassword" parameterType="string" resultType="string">
select password from member where userid=#{userId}
</select>

<update id="updateMember" parameterType="com.coderby.myapp.member.model.MemberVO">
update member set password=#{password}, name=#{name}, email=#{email}, address=#{address} 
where userid=#{userId}
</update>

<update id="updateMemberEnable" parameterType="string">
update member set enabled=case when enabled=1 then 0 
when enabled=0 then 1 end 
where userid=#{userId}
</update>

<delete id="deleteMember" parameterType="string">
delete from member where userid=#{userId}
</delete>

<delete id="deleteAuth" parameterType="string">
delete from authorities where userid=#{userId}
</delete>

<update id="updateMemberAuth" parameterType="com.coderby.myapp.member.model.MemberAuthVO">
String sql = "update authorities set authority=#{authority}? where userid=#{userId}";
</update>

<select id="getMemberList" resultType="com.coderby.myapp.member.model.MemberVO">
	select rnum, userid, name, email, address, enabled, authority 
	from (select rownum rnum, userid, name, email, address, enabled, authority 
		from (select m.userid, name, email, address, enabled, authority 
			from member m join authorities a on m.userid=a.userid order by m.userid)) 
	<if test="word == null">
		where rnum between ((#{page}-1)*10+1) and ((#{page}-1)*10+1+9)
	</if>
	<if test="word != null">
		where rnum between ((#{page}-1)*10+1) and ((#{page}-1)*10+1+9) and userid like '%'||#{word}||'%' or name like '%'#{word}||'%'
	</if>
</select>

<select id="getMemberCount" parameterType="string" resultType="int">
	select count(*) from member
	<if test="word != null">
	where userId like '%'||#{word}||'%' or name like '%'#{word}'%'
	</if>
</select>

<select id="checkId" parameterType="string" resultType="boolean">
	<!-- select exists (select 1 from member where userid=#{userId}) -->
	select count(*) from member where userid=#{userId}
</select>

</mapper>



