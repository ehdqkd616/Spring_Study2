<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coderby.myapp.member.dao.IMemberRepository">

<resultMap id="memberMap" type="com.coderby.myapp.member.model.MemberVO">
<result property="userId" column="userid" />
<result property="password" column="password" />
<result property="userName" column="username" />
<result property="email" column="email" />
<result property="phone" column="phone_number" />
<result property="nickname" column="nickname" />
<result property="enabled" column="enabled" />
<result property="reportCount" column="report_count" />
<result property="profilePic" column="profile_pic" />
<result property="authority" column="authority" />
<result property="authorityName" column="authority_name" />
</resultMap>

<resultMap id="memberListMap" type="com.coderby.myapp.member.model.MemberVO">
<result property="userId" column="userid" />
<result property="userName" column="username" />
<result property="email" column="email" />
<result property="phone" column="phone_number" />
<result property="nickname" column="nickname" />
<result property="enabled" column="enabled" />
<result property="reportCount" column="report_count" />
<result property="profilePic" column="profile_pic" />
<result property="joinDate" column="join_date" />
<result property="authorityName" column="authority_name" />
</resultMap>

<insert id="insertMember" parameterType="com.coderby.myapp.member.model.MemberVO">
insert into member values(#{userId}, #{password}, #{userName}, #{email}, #{phone}, #{nickname}, #{enabled}, #{reportCount}, #{profilePic, jdbcType=BLOB}, SYSDATE, #{authority})
</insert> 

<select id="getMember" parameterType="string" resultMap="memberMap">
select m.userid, password, username, email, phone_number, nickname, enabled, report_count, profile_pic, au.authority, au.authority_name 
from member m 
join authorities au 
on m.authority=au.authority
where m.userid=#{userId}
</select>

<select id="getPassword" parameterType="string" resultType="string">
select password from member where userid=#{userId}
</select>

<update id="updateMember" parameterType="com.coderby.myapp.member.model.MemberVO">
update member set password=#{password}, userName=#{username}, email=#{email}, phone_number=#{phone_number}, nickname=#{nickname} 
where userid=#{userId}
</update>

<update id="updateMemberEnable" parameterType="string">
update member set enabled=case when enabled=1 then 0 
when enabled=0 then 1 end 
where userid=#{userId}
</update>

<delete id="deleteMember" parameterType="string">
delete from member where userid=#{userId}
</delete>

<update id="updateMemberAuth" parameterType="com.coderby.myapp.member.model.MemberAuthVO">
String sql = "update authorities set authority=#{authority}? where userid=#{userId}";
</update>

<select id="getMemberList" resultMap="memberListMap">
	select rnum, userid, username, email, phone_number, nickname, enabled, report_count, profile_pic, join_date, authority_name 
	from (select rownum rnum, userid, username, email, phone_number, nickname, enabled, report_count, profile_pic, join_date, authority_name 
		from (select userid, username, email, phone_number, nickname, enabled, report_count, profile_pic, join_date, authority_name 
			from member m join authorities a on m.authority=a.authority order by m.userid)) 
	<if test="word == null">
		where rnum between ((#{page}-1)*10+1) and ((#{page}-1)*10+1+9)
	</if>
	<if test="word != null">
		where rnum between ((#{page}-1)*10+1) and ((#{page}-1)*10+1+9) and userid like '%'||#{word}||'%' or name like '%'#{word}||'%'
	</if>
</select>

<select id="getMemberCount" parameterType="string" resultType="int">
	select count(*) from member
	<if test="word != null">
	where userId like '%'||#{word}||'%' or name like '%'#{word}'%'
	</if>
</select>

<select id="checkId" parameterType="string" resultType="boolean">
	select count(*) from member where userid=#{userId}
</select>

<select id="checkEmail" parameterType="string" resultType="boolean">
	select count(*) from member where email=#{email}
</select>

<select id="checkPhone" parameterType="string" resultType="boolean">
	select count(*) from member where phone_number=#{phone}
</select>

<select id="checkNickname" parameterType="string" resultType="boolean">
	select count(*) from member where nickname=#{nickname}
</select>


</mapper>



